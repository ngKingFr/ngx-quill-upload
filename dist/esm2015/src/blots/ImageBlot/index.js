import Quill from 'quill';
import { Constants } from '../../utils';
const blotPath = 'formats/image';
const BlockEmbed = Quill.import(blotPath);
const SUPPORTED_ATTRIBUTES = [
    'alt',
    'height',
    'width',
    'style'
];
class ImageBlot extends BlockEmbed {
    static create(value) {
        let id;
        let src;
        if (typeof value === 'object' && !value.url) {
            return super.create();
        }
        const arr = value.url
            ? value.url.split(Constants.ID_SPLIT_FLAG)
            : value.split(Constants.ID_SPLIT_FLAG);
        if (arr.length > 1) {
            id = arr[0];
            src = arr[1];
        }
        else {
            src = value;
        }
        const node = super.create(src);
        if (typeof src === 'string') {
            node.setAttribute('src', src);
        }
        if (typeof src === 'object') {
            node.setAttribute('src', src.url);
        }
        if (id) {
            node.setAttribute('id', id);
        }
        return node;
    }
    static value(node) {
        return {
            alt: node.getAttribute('alt'),
            url: node.getAttribute('src'),
        };
    }
    static formats(domNode) {
        return SUPPORTED_ATTRIBUTES.reduce(function (formats, attribute) {
            if (domNode.hasAttribute(attribute)) {
                formats[attribute] = domNode.getAttribute(attribute);
            }
            return formats;
        }, {});
    }
    format(name, value) {
        if (SUPPORTED_ATTRIBUTES.indexOf(name) > -1) {
            if (value) {
                this.domNode.setAttribute(name, value);
            }
            else {
                this.domNode.removeAttribute(name);
            }
        }
        else {
            super.format(name, value);
        }
    }
}
ImageBlot.tagName = 'img';
ImageBlot.blotName = Constants.blots.image;
ImageBlot.className = 'quill-upload-image';
export default ImageBlot;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvYmxvdHMvSW1hZ2VCbG90L2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sS0FBSyxNQUFNLE9BQU8sQ0FBQztBQUMxQixPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBRXhDLE1BQU0sUUFBUSxHQUFHLGVBQWUsQ0FBQztBQUNqQyxNQUFNLFVBQVUsR0FBYyxLQUFLLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBU3JELE1BQU0sb0JBQW9CLEdBQUc7SUFDM0IsS0FBSztJQUNMLFFBQVE7SUFDUixPQUFPO0lBQ1AsT0FBTztDQUNSLENBQUM7QUFFRixNQUFNLFNBQVUsU0FBUSxVQUFVO0lBS2hDLE1BQU0sQ0FBQyxNQUFNLENBQUMsS0FBSztRQUNqQixJQUFJLEVBQVUsQ0FBQztRQUNmLElBQUksR0FBVyxDQUFDO1FBRWhCLElBQUksT0FBTyxLQUFLLEtBQUssUUFBUSxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBRTtZQUMzQyxPQUFPLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQztTQUN2QjtRQUVELE1BQU0sR0FBRyxHQUFHLEtBQUssQ0FBQyxHQUFHO1lBQ25CLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsYUFBYSxDQUFDO1lBQzFDLENBQUMsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxhQUFhLENBQUMsQ0FBQztRQUN6QyxJQUFJLEdBQUcsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1lBQ2xCLEVBQUUsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDWixHQUFHLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQ2Q7YUFBTTtZQUNMLEdBQUcsR0FBRyxLQUFLLENBQUM7U0FDYjtRQUVELE1BQU0sSUFBSSxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDL0IsSUFBSSxPQUFPLEdBQUcsS0FBSyxRQUFRLEVBQUU7WUFDM0IsSUFBSSxDQUFDLFlBQVksQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDLENBQUM7U0FDL0I7UUFFRCxJQUFJLE9BQU8sR0FBRyxLQUFLLFFBQVEsRUFBRTtZQUMzQixJQUFJLENBQUMsWUFBWSxDQUFDLEtBQUssRUFBRyxHQUFXLENBQUMsR0FBRyxDQUFDLENBQUM7U0FDNUM7UUFFRCxJQUFJLEVBQUUsRUFBRTtZQUNOLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1NBQzdCO1FBRUQsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRUQsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJO1FBQ2YsT0FBTztZQUNMLEdBQUcsRUFBRSxJQUFJLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQztZQUM3QixHQUFHLEVBQUUsSUFBSSxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUM7U0FDOUIsQ0FBQztJQUNKLENBQUM7SUFFRCxNQUFNLENBQUMsT0FBTyxDQUFDLE9BQU87UUFDcEIsT0FBTyxvQkFBb0IsQ0FBQyxNQUFNLENBQUMsVUFBVSxPQUFPLEVBQUUsU0FBUztZQUM3RCxJQUFJLE9BQU8sQ0FBQyxZQUFZLENBQUMsU0FBUyxDQUFDLEVBQUU7Z0JBQ25DLE9BQU8sQ0FBQyxTQUFTLENBQUMsR0FBRyxPQUFPLENBQUMsWUFBWSxDQUFDLFNBQVMsQ0FBQyxDQUFDO2FBQ3REO1lBQ0QsT0FBTyxPQUFPLENBQUM7UUFDakIsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQ1QsQ0FBQztJQUVELE1BQU0sQ0FBQyxJQUFJLEVBQUUsS0FBSztRQUNoQixJQUFJLG9CQUFvQixDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRTtZQUMzQyxJQUFJLEtBQUssRUFBRTtnQkFDVCxJQUFJLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUM7YUFDeEM7aUJBQU07Z0JBQ0wsSUFBSSxDQUFDLE9BQU8sQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLENBQUM7YUFDcEM7U0FDRjthQUFNO1lBQ0wsS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUM7U0FDM0I7SUFDSCxDQUFDO0NBQ0Y7QUFFRCxTQUFTLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQztBQUMxQixTQUFTLENBQUMsUUFBUSxHQUFHLFNBQVMsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDO0FBQzNDLFNBQVMsQ0FBQyxTQUFTLEdBQUcsb0JBQW9CLENBQUM7QUFFM0MsZUFBZSxTQUFTLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUXVpbGwgZnJvbSAncXVpbGwnO1xuaW1wb3J0IHsgQ29uc3RhbnRzIH0gZnJvbSAnLi4vLi4vdXRpbHMnO1xuXG5jb25zdCBibG90UGF0aCA9ICdmb3JtYXRzL2ltYWdlJztcbmNvbnN0IEJsb2NrRW1iZWQ6IEVtYmVkQmxvdCA9IFF1aWxsLmltcG9ydChibG90UGF0aCk7XG5cbmludGVyZmFjZSBFbWJlZEJsb3Qge1xuICBuZXcoLi4uYXJnczogYW55W10pOiBFbWJlZEJsb3Q7XG4gIGRvbU5vZGU6IEhUTUxJbWFnZUVsZW1lbnQ7XG4gIGZvcm1hdChuYW1lLCB2YWx1ZSk7XG4gIGNyZWF0ZSh2YWx1ZT8pO1xufVxuXG5jb25zdCBTVVBQT1JURURfQVRUUklCVVRFUyA9IFtcbiAgJ2FsdCcsXG4gICdoZWlnaHQnLFxuICAnd2lkdGgnLFxuICAnc3R5bGUnXG5dO1xuXG5jbGFzcyBJbWFnZUJsb3QgZXh0ZW5kcyBCbG9ja0VtYmVkIHtcbiAgc3RhdGljIHRhZ05hbWU6IHN0cmluZztcbiAgc3RhdGljIGJsb3ROYW1lOiBzdHJpbmc7XG4gIHN0YXRpYyBjbGFzc05hbWU6IHN0cmluZztcblxuICBzdGF0aWMgY3JlYXRlKHZhbHVlKTogSFRNTEVsZW1lbnQge1xuICAgIGxldCBpZDogc3RyaW5nO1xuICAgIGxldCBzcmM6IHN0cmluZztcblxuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmICF2YWx1ZS51cmwpIHtcbiAgICAgIHJldHVybiBzdXBlci5jcmVhdGUoKTtcbiAgICB9XG5cbiAgICBjb25zdCBhcnIgPSB2YWx1ZS51cmxcbiAgICAgID8gdmFsdWUudXJsLnNwbGl0KENvbnN0YW50cy5JRF9TUExJVF9GTEFHKVxuICAgICAgOiB2YWx1ZS5zcGxpdChDb25zdGFudHMuSURfU1BMSVRfRkxBRyk7XG4gICAgaWYgKGFyci5sZW5ndGggPiAxKSB7XG4gICAgICBpZCA9IGFyclswXTtcbiAgICAgIHNyYyA9IGFyclsxXTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3JjID0gdmFsdWU7XG4gICAgfVxuXG4gICAgY29uc3Qgbm9kZSA9IHN1cGVyLmNyZWF0ZShzcmMpO1xuICAgIGlmICh0eXBlb2Ygc3JjID09PSAnc3RyaW5nJykge1xuICAgICAgbm9kZS5zZXRBdHRyaWJ1dGUoJ3NyYycsIHNyYyk7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBzcmMgPT09ICdvYmplY3QnKSB7XG4gICAgICBub2RlLnNldEF0dHJpYnV0ZSgnc3JjJywgKHNyYyBhcyBhbnkpLnVybCk7XG4gICAgfVxuXG4gICAgaWYgKGlkKSB7XG4gICAgICBub2RlLnNldEF0dHJpYnV0ZSgnaWQnLCBpZCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5vZGU7XG4gIH1cblxuICBzdGF0aWMgdmFsdWUobm9kZSk6IG9iamVjdCB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGFsdDogbm9kZS5nZXRBdHRyaWJ1dGUoJ2FsdCcpLFxuICAgICAgdXJsOiBub2RlLmdldEF0dHJpYnV0ZSgnc3JjJyksXG4gICAgfTtcbiAgfVxuXG4gIHN0YXRpYyBmb3JtYXRzKGRvbU5vZGUpIHtcbiAgICByZXR1cm4gU1VQUE9SVEVEX0FUVFJJQlVURVMucmVkdWNlKGZ1bmN0aW9uIChmb3JtYXRzLCBhdHRyaWJ1dGUpIHtcbiAgICAgIGlmIChkb21Ob2RlLmhhc0F0dHJpYnV0ZShhdHRyaWJ1dGUpKSB7XG4gICAgICAgIGZvcm1hdHNbYXR0cmlidXRlXSA9IGRvbU5vZGUuZ2V0QXR0cmlidXRlKGF0dHJpYnV0ZSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZm9ybWF0cztcbiAgICB9LCB7fSk7XG4gIH1cblxuICBmb3JtYXQobmFtZSwgdmFsdWUpIHtcbiAgICBpZiAoU1VQUE9SVEVEX0FUVFJJQlVURVMuaW5kZXhPZihuYW1lKSA+IC0xKSB7XG4gICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgdGhpcy5kb21Ob2RlLnNldEF0dHJpYnV0ZShuYW1lLCB2YWx1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmRvbU5vZGUucmVtb3ZlQXR0cmlidXRlKG5hbWUpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBzdXBlci5mb3JtYXQobmFtZSwgdmFsdWUpO1xuICAgIH1cbiAgfVxufVxuXG5JbWFnZUJsb3QudGFnTmFtZSA9ICdpbWcnO1xuSW1hZ2VCbG90LmJsb3ROYW1lID0gQ29uc3RhbnRzLmJsb3RzLmltYWdlO1xuSW1hZ2VCbG90LmNsYXNzTmFtZSA9ICdxdWlsbC11cGxvYWQtaW1hZ2UnO1xuXG5leHBvcnQgZGVmYXVsdCBJbWFnZUJsb3Q7XG4iXX0=