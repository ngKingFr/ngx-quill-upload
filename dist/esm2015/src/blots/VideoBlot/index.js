import Quill from 'quill';
import { Constants } from '../../utils';
const blotPath = 'blots/block/embed';
const BlockEmbed = Quill.import(blotPath);
class VideoBlot extends BlockEmbed {
    static create(value) {
        let id;
        let src;
        if (typeof value === 'object' && !value.url) {
            return super.create();
        }
        const arr = value.url
            ? value.url.split(Constants.ID_SPLIT_FLAG)
            : value.split(Constants.ID_SPLIT_FLAG);
        if (arr.length > 1) {
            id = arr[0];
            src = arr[1];
        }
        else {
            src = value;
        }
        const node = super.create(src);
        if (typeof src === 'string') {
            node.setAttribute('src', src);
        }
        if (typeof src === 'object') {
            node.setAttribute('src', src.url);
        }
        if (id) {
            node.setAttribute('id', id);
        }
        node.setAttribute('controls', true);
        node.setAttribute('controlsList', 'nodownload');
        node.setAttribute('width', '100%');
        return node;
    }
    static formats(node) {
        const format = {};
        if (node.hasAttribute('height')) {
            format.height = node.getAttribute('height');
        }
        if (node.hasAttribute('width')) {
            format.width = node.getAttribute('width');
        }
        return format;
    }
    static value(node) {
        return node.getAttribute('src');
    }
    format(name, value) {
        if (name === 'height' || name === 'width') {
            if (value) {
                this.domNode.setAttribute(name, value);
            }
            else {
                this.domNode.removeAttribute(name, value);
            }
        }
        else {
            super.format(name, value);
        }
    }
}
VideoBlot.tagName = 'video';
VideoBlot.blotName = Constants.blots.video;
VideoBlot.className = 'quill-upload-video';
export default VideoBlot;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvYmxvdHMvVmlkZW9CbG90L2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sS0FBSyxNQUFNLE9BQU8sQ0FBQztBQUMxQixPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBRXhDLE1BQU0sUUFBUSxHQUFHLG1CQUFtQixDQUFDO0FBQ3JDLE1BQU0sVUFBVSxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7QUFFMUMsTUFBTSxTQUFVLFNBQVEsVUFBVTtJQU1oQyxNQUFNLENBQUMsTUFBTSxDQUFDLEtBQUs7UUFDakIsSUFBSSxFQUFVLENBQUM7UUFDZixJQUFJLEdBQVcsQ0FBQztRQUVoQixJQUFJLE9BQU8sS0FBSyxLQUFLLFFBQVEsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUU7WUFDM0MsT0FBTyxLQUFLLENBQUMsTUFBTSxFQUFFLENBQUM7U0FDdkI7UUFDRCxNQUFNLEdBQUcsR0FBRyxLQUFLLENBQUMsR0FBRztZQUNuQixDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLGFBQWEsQ0FBQztZQUMxQyxDQUFDLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsYUFBYSxDQUFDLENBQUM7UUFDekMsSUFBSSxHQUFHLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtZQUNsQixFQUFFLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ1osR0FBRyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUNkO2FBQU07WUFDTCxHQUFHLEdBQUcsS0FBSyxDQUFDO1NBQ2I7UUFFRCxNQUFNLElBQUksR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQy9CLElBQUksT0FBTyxHQUFHLEtBQUssUUFBUSxFQUFFO1lBQzNCLElBQUksQ0FBQyxZQUFZLENBQUMsS0FBSyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1NBQy9CO1FBRUQsSUFBSSxPQUFPLEdBQUcsS0FBSyxRQUFRLEVBQUU7WUFDM0IsSUFBSSxDQUFDLFlBQVksQ0FBQyxLQUFLLEVBQUcsR0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1NBQzVDO1FBRUQsSUFBSSxFQUFFLEVBQUU7WUFDTixJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQztTQUM3QjtRQUVELElBQUksQ0FBQyxZQUFZLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ3BDLElBQUksQ0FBQyxZQUFZLENBQUMsY0FBYyxFQUFFLFlBQVksQ0FBQyxDQUFDO1FBQ2hELElBQUksQ0FBQyxZQUFZLENBQUMsT0FBTyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBRW5DLE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVELE1BQU0sQ0FBQyxPQUFPLENBQUMsSUFBSTtRQUNqQixNQUFNLE1BQU0sR0FBUSxFQUFFLENBQUM7UUFDdkIsSUFBSSxJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxFQUFFO1lBQy9CLE1BQU0sQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsQ0FBQztTQUM3QztRQUNELElBQUksSUFBSSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsRUFBRTtZQUM5QixNQUFNLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLENBQUM7U0FDM0M7UUFDRCxPQUFPLE1BQU0sQ0FBQztJQUNoQixDQUFDO0lBRUQsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJO1FBQ2YsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ2xDLENBQUM7SUFFRCxNQUFNLENBQUMsSUFBSSxFQUFFLEtBQUs7UUFDaEIsSUFBSSxJQUFJLEtBQUssUUFBUSxJQUFJLElBQUksS0FBSyxPQUFPLEVBQUU7WUFDekMsSUFBSSxLQUFLLEVBQUU7Z0JBQ1QsSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFDO2FBQ3hDO2lCQUFNO2dCQUNMLElBQUksQ0FBQyxPQUFPLENBQUMsZUFBZSxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQzthQUMzQztTQUNGO2FBQU07WUFDTCxLQUFLLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQztTQUMzQjtJQUNILENBQUM7Q0FDRjtBQUVELFNBQVMsQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO0FBQzVCLFNBQVMsQ0FBQyxRQUFRLEdBQUcsU0FBUyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUM7QUFDM0MsU0FBUyxDQUFDLFNBQVMsR0FBRyxvQkFBb0IsQ0FBQztBQUUzQyxlQUFlLFNBQVMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBRdWlsbCBmcm9tICdxdWlsbCc7XG5pbXBvcnQgeyBDb25zdGFudHMgfSBmcm9tICcuLi8uLi91dGlscyc7XG5cbmNvbnN0IGJsb3RQYXRoID0gJ2Jsb3RzL2Jsb2NrL2VtYmVkJztcbmNvbnN0IEJsb2NrRW1iZWQgPSBRdWlsbC5pbXBvcnQoYmxvdFBhdGgpO1xuXG5jbGFzcyBWaWRlb0Jsb3QgZXh0ZW5kcyBCbG9ja0VtYmVkIHtcbiAgc3RhdGljIGNsYXNzTmFtZTogc3RyaW5nO1xuICBzdGF0aWMgYmxvdE5hbWU6IHN0cmluZztcbiAgc3RhdGljIHRhZ05hbWU6IHN0cmluZztcbiAgZG9tTm9kZTogYW55O1xuXG4gIHN0YXRpYyBjcmVhdGUodmFsdWUpOiBIVE1MRWxlbWVudCB7XG4gICAgbGV0IGlkOiBzdHJpbmc7XG4gICAgbGV0IHNyYzogc3RyaW5nO1xuXG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgIXZhbHVlLnVybCkge1xuICAgICAgcmV0dXJuIHN1cGVyLmNyZWF0ZSgpO1xuICAgIH1cbiAgICBjb25zdCBhcnIgPSB2YWx1ZS51cmxcbiAgICAgID8gdmFsdWUudXJsLnNwbGl0KENvbnN0YW50cy5JRF9TUExJVF9GTEFHKVxuICAgICAgOiB2YWx1ZS5zcGxpdChDb25zdGFudHMuSURfU1BMSVRfRkxBRyk7XG4gICAgaWYgKGFyci5sZW5ndGggPiAxKSB7XG4gICAgICBpZCA9IGFyclswXTtcbiAgICAgIHNyYyA9IGFyclsxXTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3JjID0gdmFsdWU7XG4gICAgfVxuXG4gICAgY29uc3Qgbm9kZSA9IHN1cGVyLmNyZWF0ZShzcmMpO1xuICAgIGlmICh0eXBlb2Ygc3JjID09PSAnc3RyaW5nJykge1xuICAgICAgbm9kZS5zZXRBdHRyaWJ1dGUoJ3NyYycsIHNyYyk7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBzcmMgPT09ICdvYmplY3QnKSB7XG4gICAgICBub2RlLnNldEF0dHJpYnV0ZSgnc3JjJywgKHNyYyBhcyBhbnkpLnVybCk7XG4gICAgfVxuXG4gICAgaWYgKGlkKSB7XG4gICAgICBub2RlLnNldEF0dHJpYnV0ZSgnaWQnLCBpZCk7XG4gICAgfVxuXG4gICAgbm9kZS5zZXRBdHRyaWJ1dGUoJ2NvbnRyb2xzJywgdHJ1ZSk7XG4gICAgbm9kZS5zZXRBdHRyaWJ1dGUoJ2NvbnRyb2xzTGlzdCcsICdub2Rvd25sb2FkJyk7XG4gICAgbm9kZS5zZXRBdHRyaWJ1dGUoJ3dpZHRoJywgJzEwMCUnKTtcblxuICAgIHJldHVybiBub2RlO1xuICB9XG5cbiAgc3RhdGljIGZvcm1hdHMobm9kZSkge1xuICAgIGNvbnN0IGZvcm1hdDogYW55ID0ge307XG4gICAgaWYgKG5vZGUuaGFzQXR0cmlidXRlKCdoZWlnaHQnKSkge1xuICAgICAgZm9ybWF0LmhlaWdodCA9IG5vZGUuZ2V0QXR0cmlidXRlKCdoZWlnaHQnKTtcbiAgICB9XG4gICAgaWYgKG5vZGUuaGFzQXR0cmlidXRlKCd3aWR0aCcpKSB7XG4gICAgICBmb3JtYXQud2lkdGggPSBub2RlLmdldEF0dHJpYnV0ZSgnd2lkdGgnKTtcbiAgICB9XG4gICAgcmV0dXJuIGZvcm1hdDtcbiAgfVxuXG4gIHN0YXRpYyB2YWx1ZShub2RlKSB7XG4gICAgcmV0dXJuIG5vZGUuZ2V0QXR0cmlidXRlKCdzcmMnKTtcbiAgfVxuXG4gIGZvcm1hdChuYW1lLCB2YWx1ZSkge1xuICAgIGlmIChuYW1lID09PSAnaGVpZ2h0JyB8fCBuYW1lID09PSAnd2lkdGgnKSB7XG4gICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgdGhpcy5kb21Ob2RlLnNldEF0dHJpYnV0ZShuYW1lLCB2YWx1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmRvbU5vZGUucmVtb3ZlQXR0cmlidXRlKG5hbWUsIHZhbHVlKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgc3VwZXIuZm9ybWF0KG5hbWUsIHZhbHVlKTtcbiAgICB9XG4gIH1cbn1cblxuVmlkZW9CbG90LnRhZ05hbWUgPSAndmlkZW8nO1xuVmlkZW9CbG90LmJsb3ROYW1lID0gQ29uc3RhbnRzLmJsb3RzLnZpZGVvO1xuVmlkZW9CbG90LmNsYXNzTmFtZSA9ICdxdWlsbC11cGxvYWQtdmlkZW8nO1xuXG5leHBvcnQgZGVmYXVsdCBWaWRlb0Jsb3Q7XG4iXX0=